{"remainingRequest":"/Users/zhangfan/dav/payment/portal/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/zhangfan/dav/payment/portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhangfan/dav/payment/portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangfan/dav/payment/portal/src/components/blog-details/BlogDetails.vue?vue&type=template&id=d11b7590&","dependencies":[{"path":"/Users/zhangfan/dav/payment/portal/src/components/blog-details/BlogDetails.vue","mtime":1606231699000},{"path":"/Users/zhangfan/dav/payment/portal/node_modules/cache-loader/dist/cjs.js","mtime":1606380084711},{"path":"/Users/zhangfan/dav/payment/portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1606380098543},{"path":"/Users/zhangfan/dav/payment/portal/node_modules/cache-loader/dist/cjs.js","mtime":1606380084711},{"path":"/Users/zhangfan/dav/payment/portal/node_modules/vue-loader/lib/index.js","mtime":1606380098543}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}